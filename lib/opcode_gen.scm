(include "util.scm")

(define opcodes '())

(define (read-line . port)
  (define (eat p c)
    (if (and (not (eof-object? (peek-char p)))
             (char=? (peek-char p) c))
        (read-char p)))
  (let ((p (if (null? port) (current-input-port) (car port))))
    (let loop ((c (read-char p)) (line '()))
      (cond ((eof-object? c) (if (null? line) c (list->string (reverse line))))
            ((char=? #\newline c) (eat p #\return) (list->string (reverse line)))
            ((char=? #\return c) (eat p #\newline) (list->string (reverse line)))
            (else (loop (read-char p) (cons c line)))))))

(define (string-split str chrs)
  (define l (string->list str))
  (let loop ((l l) (cur '()))
    (if (pair? l)
	(if (memq (car l) chrs)
	    (cons (list->string (reverse cur)) (loop (cdr l) '()))
	    (loop (cdr l) (cons (car l) cur)))
	(list (list->string (reverse cur))))))

(define (strip-quotes str)
  (if (eq? #\" (string-ref str 0))
      (substring str 1 (- (string-length str) 1))
      str))

(define (find-lib-funcs file)
  (define p (open-input-file file))
  (let loop ()
    (define line (read-line p))
    (if (not (eof-object? line))
	(begin
	  (if (and (>= (string-length line) 7)
		   (equal? "LIBRARY" (substring line 0 7)))
	      (let ((new-code (string->symbol (strip-quotes (second (string-split line '(#\( #\) #\,)))))))
		(set! opcodes	(append opcodes (list (list new-code))))))
	  (loop))))
  (close-input-port p))

(find-lib-funcs "../src/vm.c")
(dformat "There are ~a opcodes\n" (length opcodes))
;(pretty-print opcodes)

(define (c-var-name str)
  (list->string (filter-map (lambda (chr)
			      (case chr
				((#\-) #\_)
				((#\! #\> #\?) #f)
				(else chr)))
		(string->list str))))

(set! opcodes (map (lambda (code num)
		     (append code (list num (c-var-name (symbol->string (car code))))))
		   opcodes
		   (iota (length opcodes))))


(define opcode-h (open-output-file "../src/opcodes-gen.h"))
(display "#pragma once\n\n" opcode-h)
(display "#define BYTECODE_INSTRUCTIONS \\\n" opcode-h)
(for-each (lambda (op)
	    (display "  X(" opcode-h)
	    (display (caddr op) opcode-h)
	    (display ", \"" opcode-h)
	    (display (symbol->string (car op)) opcode-h)
	    (display "\") \\\n" opcode-h)) opcodes)
(newline opcode-h)
(close-output-port opcode-h)

(define opcode-scm (open-output-file "opcodes.scm"))
(display "(define opcodes '(\n" opcode-scm)
(for-each (lambda (op)
	    (display "  (" opcode-scm)
	    (display (symbol->string (car op)) opcode-scm)
	    (display " " opcode-scm)
	    (display (cadr op) opcode-scm)
	    (display ")\n" opcode-scm))
	  opcodes)
(display "))\n" opcode-scm)
(close-output-port opcode-scm)
