(include "util.scm")
(define (open-output-file-chez f) (open-output-file f 'replace ))

(define opcodes
  '(
    (ISLT)
    (ISF)
    (ISEQ)
    (JISEQ)
    (JISLT)
    (JFUNC)
    (JLOOP)
    (JEQ)))

(define (read-line . port)
  (define (eat p c)
    (if (and (not (eof-object? (peek-char p)))
             (char=? (peek-char p) c))
        (read-char p)))
  (let ((p (if (null? port) (current-input-port) (car port))))
    (let loop ((c (read-char p)) (line '()))
      (cond ((eof-object? c) (if (null? line) c (list->string (reverse line))))
            ((char=? #\newline c) (eat p #\return) (list->string (reverse line)))
            ((char=? #\return c) (eat p #\newline) (list->string (reverse line)))
            (else (loop (read-char p) (cons c line)))))))

(define (string-split str chrs)
  (define l (string->list str))
  (let loop ((l l) (cur '()))
    (if (pair? l)
	(if (memq (car l) chrs)
	    (cons (list->string (reverse cur)) (loop (cdr l) '()))
	    (loop (cdr l) (cons (car l) cur)))
	(list (list->string (reverse cur))))))

(define (find-lib-funcs file)
  (define p (open-input-file file))
  (let loop ()
    (define line (read-line p))
    (when (not (eof-object? line))
      (when (and (>= (string-length line) 7)
		 (equal? "LIBRARY" (substring line 0 7)))
	(let ((new-code (string->symbol (second (string-split line '(#\( #\) #\,))))))
	  (set! opcodes	(append opcodes (list (list new-code))))))
      (loop)))
  (close-input-port p))

(find-lib-funcs "stdlib.cpp")
(dformat "There are ~a opcodes\n" (length opcodes))
;(pretty-print opcodes)

(define (c-var-name str)
  (list->string (filter-map (lambda (chr)
			      (case chr
				((#\-) #\_)
				((#\! #\>) #f)
				(else chr)))
		(string->list str))))

(set! opcodes (map (lambda (code num)
		     (append code (list num (c-var-name (symbol->string (car code))))))
		   opcodes
		   (iota (length opcodes))))


(define opcode-cpp (open-output-file-chez "opcodes.cpp"))
(display "#include \"bytecode.h\"\n" opcode-cpp)
(display "const char* ins_names[] = {\n" opcode-cpp)
(for-each (lambda (op)
	    (display (format "  \"~a\",\n" (symbol->string (car op))) opcode-cpp)
	    ) opcodes)
(display "};\n" opcode-cpp)
(close-output-port opcode-cpp)

(define opcode-h (open-output-file-chez "opcodes.h"))
(display "extern const char* ins_names[];\n" opcode-h)
(display "enum {\n" opcode-h)
(for-each (lambda (op)
	    (display (format "  ~a,\n" (caddr op)) opcode-h)
	    ) opcodes)
(display "  INS_MAX\n" opcode-h)
(display "};\n" opcode-h)
(close-output-port opcode-h)

(define op-table-h (open-output-file-chez "opcodes-table.h"))
(for-each (lambda (op)
	    (display (format "  l_op_table[~a] = INS_~a;\n" (caddr op) (caddr op)) op-table-h)
	    ) opcodes)
(close-output-port op-table-h)

(define opcode-scm (open-output-file-chez "opcodes.scm"))
(display "(define opcodes '(\n" opcode-scm)
(for-each (lambda (op)
	    (display (format "  (~a ~a)\n" (symbol->string (car op)) (cadr op)) opcode-scm))
	  opcodes)
(display "))\n" opcode-scm)
(close-output-port opcode-scm)
