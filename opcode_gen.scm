(include "util.scm")
(define (open-output-file-chez f) (open-output-file f 'replace ))

(define opcodes
  '(
    (FUNC)
    (KSHORT)
    (ISGE)
    (JMP)
    (RET1)
    (SUBVN)
    (CALL)
    (ADDVV)
    (HALT)
    (ISLT)
    (ISF)
    (SUBVV)
    (GGET)
    (GSET)
    (KFUNC)
    (CALLT)
    (KONST)
    (MOV)
    (ISEQ)
    (ADDVN)
    (JISEQ)
    (JISLT)
    (JFUNC)
    (JLOOP)
    (GUARD)
    (MULVV)
    (BOX)
    (UNBOX)
    (SET-BOX!)
    (CLOSURE)
    (CLOSURE-GET)
    (CLOSURE-PTR)
    (CLOSURE-SET)
    (EQ)
    (CONS)
    (CAR)
    (CDR)
    (MAKE-VECTOR)
    (VECTOR-SET!)
    (VECTOR-REF)
    (VECTOR-LENGTH)
    (SET-CAR!)
    (SET-CDR!)
    (WRITE)
    (STRING-LENGTH)
    (STRING-REF)
    (STRING-SET!)
    (MAKE-STRING)
    (APPLY)
    (SYMBOL->STRING)
    (STRING->SYMBOL)
    (CHAR->INTEGER)
    (INTEGER->CHAR)
    (REM)
    (DIV)
    (CALLCC)
    (CALLCC-RESUME)
    (OPEN)
    (CLOSE)
    (READ)
    (PEEK)
    (WRITE-U8)
    (JEQ)
    (INEXACT)
    (EXACT)
    (WRITE-DOUBLE)
    (ROUND)))

(define (c-var-name str)
  (list->string (filter-map (lambda (chr)
			      (case chr
				((#\-) #\_)
				((#\! #\>) #f)
				(else chr)))
		(string->list str))))

(set! opcodes (map (lambda (code num)
		     (append code (list num (c-var-name (symbol->string (car code))))))
		   opcodes
		   (iota (length opcodes))))


(define opcode-cpp (open-output-file-chez "opcodes.cpp"))
(display "#include \"bytecode.h\"\n" opcode-cpp)
(display "const char* ins_names[] = {\n" opcode-cpp)
(for-each (lambda (op)
	    (display (format "  \"~a\",\n" (symbol->string (car op))) opcode-cpp)
	    ) opcodes)
(display "};\n" opcode-cpp)
(close-output-port opcode-cpp)

(define opcode-h (open-output-file-chez "opcodes.h"))
(display "extern const char* ins_names[];\n" opcode-h)
(display "enum {\n" opcode-h)
(for-each (lambda (op)
	    (display (format "  ~a,\n" (caddr op)) opcode-h)
	    ) opcodes)
(display "  INS_MAX\n" opcode-h)
(display "};\n" opcode-h)
(close-output-port opcode-h)

(define op-table-h (open-output-file-chez "opcodes-table.h"))
(for-each (lambda (op)
	    (display (format "  l_op_table[~a] = INS_~a;\n" (caddr op) (caddr op)) op-table-h)
	    ) opcodes)
(close-output-port op-table-h)

(define opcode-scm (open-output-file-chez "opcodes.scm"))
(display "(define opcodes '(\n" opcode-scm)
(for-each (lambda (op)
	    (display (format "  (~a ~a)\n" (symbol->string (car op)) (cadr op)) opcode-scm))
	  opcodes)
(display "))\n" opcode-scm)
(close-output-port opcode-scm)
